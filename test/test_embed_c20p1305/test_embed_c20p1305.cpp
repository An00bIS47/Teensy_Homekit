//
// test_embed_srp.cpp
// Homekit
//
//  Created on: 10.05.2021
//      Author: michael
//

#include <Arduino.h>
#include <unity.h>

#ifdef NATIVE
using namespace fakeit;
#endif

#include "../test_config.h"
#include "Crypto/m_chacha20_poly1305.h"

void setUp(void)
{
#ifdef NATIVE
    ArduinoFakeReset();
#endif
}

//
//  This fails on homekit (directly after pairing)
//
void test_c20p1305_decrypt_first(void){

    uint8_t testkey[32] = {
        0xC6, 0xD3, 0xE1, 0xE7, 0xD4, 0xDA, 0x3C, 0x1F,
        0x27, 0x9B, 0xFF, 0x30, 0xFB, 0x00, 0xD5, 0x66,
        0xBC, 0xCD, 0x96, 0xA8, 0xEF, 0xD7, 0xE7, 0x24,
        0xCD, 0x3B, 0x7A, 0xDF, 0xD2, 0x66, 0xCF, 0xAE
    };

    uint8_t nonce[12] = {
        0, 0, 0, 0,
        'P', 'V', '-', 'M', 's', 'g', '0', '3'
    };

    // uint8_t aad[12] = {
    //     0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3,
    //     0xc4, 0xc5, 0xc6, 0xc7
    // };

    uint8_t aad_len = 0;

    uint8_t expected_len = 104;
    uint8_t expected[104] = {
        0x01, 0x24, 0x37, 0x33, 0x65, 0x36, 0x39, 0x38, 0x36, 0x62, 0x2D, 0x30, 0x34, 0x39, 0x39, 0x2D,
        0x34, 0x63, 0x63, 0x32, 0x2D, 0x61, 0x36, 0x62, 0x32, 0x2D, 0x61, 0x30, 0x34, 0x36, 0x33, 0x38,
        0x31, 0x37, 0x31, 0x31, 0x32, 0x64, 0x0A, 0x40, 0xE3, 0x73, 0xD0, 0x59, 0xE1, 0x71, 0xC7, 0x41,
        0x86, 0x21, 0x76, 0x3D, 0xEB, 0xF4, 0x20, 0xC0, 0x04, 0x42, 0xAC, 0x82, 0xB1, 0xCD, 0x56, 0xCF,
        0x29, 0x47, 0xF1, 0x8A, 0x8F, 0x51, 0xC1, 0x4A, 0xFF, 0xDF, 0xCC, 0x3A, 0x61, 0x76, 0xB2, 0xF9,
        0x67, 0x27, 0xC7, 0xFF, 0x60, 0x64, 0x83, 0x8E, 0xF5, 0x48, 0xF0, 0x4F, 0x7D, 0x2C, 0xDF, 0xC4,
        0xE7, 0xC6, 0xFF, 0xCB, 0x33, 0x63, 0xFE, 0x01
    };

    uint8_t input_len = expected_len;
    uint8_t input[104] = {
        0xC7, 0x82, 0x3E, 0x87, 0xEC, 0x64, 0x04, 0xE5, 0x8C, 0x27, 0x94, 0xB8, 0x83, 0xBE, 0x08, 0xA4,
        0x22, 0x36, 0xCF, 0x3F, 0xB1, 0x32, 0xE2, 0x64, 0x9A, 0xC9, 0xAD, 0x90, 0x91, 0xAD, 0x3B, 0xE8,
        0xA8, 0x2A, 0xDF, 0xF9, 0x7B, 0x7A, 0x66, 0xA6, 0xC5, 0xE5, 0xEE, 0xF9, 0x1A, 0xF6, 0x7C, 0x0C,
        0xAA, 0xDC, 0x88, 0x5E, 0x28, 0x9A, 0x51, 0x97, 0x91, 0x95, 0x1B, 0x99, 0x3F, 0x9C, 0xD3, 0x9E,
        0x2F, 0x6F, 0x33, 0xD3, 0x83, 0xDE, 0x5F, 0x85, 0x49, 0xE6, 0x66, 0x92, 0x86, 0x0D, 0xF7, 0x23,
        0x90, 0xEA, 0xD3, 0xB3, 0xEF, 0xFA, 0x4B, 0x6D, 0xC8, 0x8C, 0xB3, 0x9D, 0xDC, 0x46, 0x05, 0x41,
        0x54, 0xEC, 0xB8, 0xD3, 0xFB, 0x8B, 0x7C, 0xC4
    };

    uint8_t mac_len = 16;
    uint8_t mac[16] = {
        0x46, 0x70, 0xE9, 0x1F, 0x81, 0x00, 0xB2, 0x9F,
        0x61, 0x15, 0xD9, 0x0F, 0xE1, 0x7F, 0xD1, 0xFE
    };

    uint8_t actual_input_len = input_len + mac_len;
    uint8_t actual_input[actual_input_len];

    memcpy(actual_input, input, input_len);
    memcpy(actual_input + input_len, mac, mac_len);

    uint8_t output[input_len];
    int result = chacha20_poly1305_decrypt_with_nonce(nonce, testkey, NULL, aad_len, actual_input, actual_input_len, output);

    TEST_ASSERT_EQUAL(0, result);
    TEST_ASSERT_EQUAL_MEMORY(expected, output, input_len);
}

//
//  This passes on homekit
//
void test_c20p1305_decrypt_second(void){

    uint8_t testkey[32] = {
        0x93, 0xCF, 0x02, 0x95, 0x11, 0x86, 0x18, 0x19,
        0x28, 0xFF, 0x48, 0x19, 0x53, 0x4A, 0x35, 0x87,
        0x6E, 0x06, 0xDB, 0x45, 0x42, 0x51, 0x9C, 0x11,
        0x8F, 0x7E, 0xE5, 0xFC, 0x56, 0xA2, 0xE9, 0xD4,
    };

    uint8_t nonce[12] = {
        0, 0, 0, 0,
        'P', 'V', '-', 'M', 's', 'g', '0', '3'
    };

    // uint8_t aad[12] = {
    //     0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3,
    //     0xc4, 0xc5, 0xc6, 0xc7
    // };

    uint8_t aad_len = 0;

    uint8_t expected_len = 104;
    uint8_t expected[104] = {
        0x01, 0x24, 0x37, 0x33, 0x65, 0x36, 0x39, 0x38, 0x36, 0x62, 0x2D, 0x30, 0x34, 0x39, 0x39, 0x2D,
        0x34, 0x63, 0x63, 0x32, 0x2D, 0x61, 0x36, 0x62, 0x32, 0x2D, 0x61, 0x30, 0x34, 0x36, 0x33, 0x38,
        0x31, 0x37, 0x31, 0x31, 0x32, 0x64, 0x0A, 0x40, 0xE3, 0x73, 0xD0, 0x59, 0xE1, 0x71, 0xC7, 0x41,
        0x86, 0x21, 0x76, 0x3D, 0xEB, 0xF4, 0x20, 0xC0, 0x04, 0x42, 0xAC, 0x82, 0xB1, 0xCD, 0x56, 0xCF,
        0x29, 0x47, 0xF1, 0x8A, 0x8F, 0x51, 0xC1, 0x4A, 0xFF, 0xDF, 0xCC, 0x3A, 0x61, 0x76, 0xB2, 0xF9,
        0x67, 0x27, 0xC7, 0xFF, 0x60, 0x64, 0x83, 0x8E, 0xF5, 0x48, 0xF0, 0x4F, 0x7D, 0x2C, 0xDF, 0xC4,
        0xE7, 0xC6, 0xFF, 0xCB, 0x33, 0x63, 0xFE, 0x01
    };

    uint8_t input_len = expected_len;
    uint8_t input[104] = {
        0x81, 0x0D, 0xBC, 0xE4, 0xA9, 0xE3, 0x79, 0xC3, 0xA2, 0x2B, 0x31, 0x94, 0xF4, 0x93, 0xDB, 0xE1,
        0x8B, 0xDA, 0xAE, 0xE8, 0xC4, 0xCA, 0x38, 0xB9, 0x52, 0x4C, 0xC1, 0xF8, 0xDD, 0x69, 0xF0, 0xB5,
        0xDD, 0x78, 0x3F, 0x3E, 0x32, 0x94, 0xA1, 0x1E, 0x2A, 0x28, 0xD5, 0x2D, 0xC7, 0xB5, 0xD0, 0x8C,
        0x9A, 0x59, 0x0E, 0xB4, 0x3C, 0x32, 0xE4, 0x06, 0x76, 0xBC, 0xA9, 0x45, 0x31, 0x49, 0x16, 0xD2,
        0xC8, 0x3D, 0x44, 0xCE, 0x09, 0x6A, 0x37, 0x94, 0x6D, 0x4A, 0xAE, 0x13, 0x8F, 0xD5, 0x5B, 0x56,
        0x9A, 0x4E, 0x67, 0xFD, 0xAE, 0x3A, 0xE2, 0x5B, 0x7D, 0x49, 0x5E, 0x13, 0x19, 0x54, 0xD4, 0x15,
        0x15, 0xD4, 0x01, 0xA6, 0x86, 0xE3, 0x79, 0xA8
    };

    uint8_t mac_len = 16;
    uint8_t mac[16] = {
        0xC2, 0x0F, 0xEB, 0x66, 0x7F, 0x5C, 0xD5, 0x62,
        0x68, 0x74, 0x1C, 0x4A, 0xEB, 0xBC, 0x37, 0x12
    };

    uint8_t actual_input_len = input_len + mac_len;
    uint8_t actual_input[actual_input_len];

    memcpy(actual_input, input, input_len);
    memcpy(actual_input + input_len, mac, mac_len);

    uint8_t output[input_len];
    int result = chacha20_poly1305_decrypt_with_nonce(nonce, testkey, NULL, aad_len, actual_input, actual_input_len, output);

    TEST_ASSERT_EQUAL(0, result);
    TEST_ASSERT_EQUAL_MEMORY(expected, output, input_len);
}



void test_c20p1305_decrypt(void){

    uint8_t testkey[32] = {
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
        0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
        0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
        0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f
    };

    uint8_t nonce[12] = {
        0x07, 0x00, 0x00, 0x00,                         /* 32-bit common part */
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47  /* 64-bit IV */
    };

    uint8_t aad[12] = {
        0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3,
        0xc4, 0xc5, 0xc6, 0xc7
    };

    uint8_t aad_len = 12;

    uint8_t input_len = 114;
    uint8_t expected[114] = {
        0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61,
        0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
        0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
        0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39,
        0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
        0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66,
        0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
        0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20,
        0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75,
        0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
        0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f,
        0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
        0x74, 0x2e
    };


    uint8_t input[114] = {
        0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb,
        0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2,
        0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe,
        0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6,
        0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12,
        0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b,
        0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29,
        0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36,
        0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c,
        0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58,
        0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94,
        0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc,
        0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d,
        0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b,
        0x61, 0x16
    };

    uint8_t mac_len = 16;
    uint8_t mac[16] = {
        0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a,
        0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60, 0x06, 0x91
    };

    uint8_t actual_input_len = input_len + mac_len;
    uint8_t actual_input[actual_input_len];

    memcpy(actual_input, input, input_len);
    memcpy(actual_input + input_len, mac, mac_len);

    uint8_t output[input_len];
    int result = chacha20_poly1305_decrypt_with_nonce(nonce, testkey, aad, aad_len, actual_input, actual_input_len, output);

    TEST_ASSERT_EQUAL(0, result);
    TEST_ASSERT_EQUAL_MEMORY(expected, output, input_len);
}


void test_c20p1305_encrypt(void){

    uint8_t testkey[32] = {
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
        0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
        0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
        0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f
    };

    uint8_t nonce[12] = {
        0x07, 0x00, 0x00, 0x00,                         /* 32-bit common part */
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47  /* 64-bit IV */
    };

    uint8_t aad[12] = {
        0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3,
        0xc4, 0xc5, 0xc6, 0xc7
    };

    uint8_t aad_len = 12;

    uint8_t input_len = 114;
    uint8_t input[114] = {
        0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61,
        0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e, 0x74, 0x6c,
        0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x61, 0x73,
        0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39,
        0x3a, 0x20, 0x49, 0x66, 0x20, 0x49, 0x20, 0x63,
        0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66,
        0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f,
        0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20,
        0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20,
        0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75,
        0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73,
        0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f,
        0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
        0x74, 0x2e
    };


    uint8_t expected[114] = {
        0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb,
        0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef, 0x7e, 0xc2,
        0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe,
        0xa9, 0xe2, 0xb5, 0xa7, 0x36, 0xee, 0x62, 0xd6,
        0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12,
        0x82, 0xfa, 0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b,
        0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29,
        0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36,
        0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77, 0x8b, 0x8c,
        0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58,
        0xfa, 0xb3, 0x24, 0xe4, 0xfa, 0xd6, 0x75, 0x94,
        0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc,
        0x3f, 0xf4, 0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d,
        0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b,
        0x61, 0x16
    };

    uint8_t mac_len = 16;
    uint8_t mac[16] = {
        0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a,
        0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60, 0x06, 0x91
    };

    uint8_t output[input_len + mac_len];
    int result = chacha20_poly1305_encrypt_with_nonce(nonce, testkey, aad, aad_len, input, input_len, output);

    TEST_ASSERT_EQUAL(0, result);
    TEST_ASSERT_EQUAL_MEMORY(expected, output, input_len);
    TEST_ASSERT_EQUAL_MEMORY(mac, output + input_len, mac_len);
}


int runAllTests(){
    UNITY_BEGIN();
    for (int i=0; i < TEST_ITERATIONS; i++){
        RUN_TEST(test_c20p1305_decrypt);
        RUN_TEST(test_c20p1305_decrypt_second);
        RUN_TEST(test_c20p1305_decrypt_first);
        RUN_TEST(test_c20p1305_encrypt);
    }


    return UNITY_END();
}

#ifdef ARDUINO
void setup() {
    // NOTE!!! Wait for >2 secs
    // if board doesn't support software reset via Serial.DTR/RTS
    delay(3000);

    runAllTests();
}

void loop() {
    digitalWrite(13, HIGH);
    delay(100);
    digitalWrite(13, LOW);
    delay(500);
}

#else

int main(int argc, char **argv)
{
    return runAllTests();
}

#endif

