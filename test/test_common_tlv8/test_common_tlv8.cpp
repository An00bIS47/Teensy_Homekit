//
// test_common_tlv8.cpp
// Homekit
//
//  Created on: 10.05.2021
//      Author: michael
//
#include <Arduino.h>
#include <unity.h>

#ifdef NATIVE
using namespace fakeit;
#endif

#include "HAP/HAPTLV8.hpp"

void setUp(void)
{
#ifdef NATIVE
    ArduinoFakeReset();
#endif
}

void test_tlv8_simple_encode(void){
    TLV8 tlv;
    const int length = 9;
    uint8_t data[length] = {0x01, 0x07, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
    tlv.encode(data, length);

    uint8_t result[tlv.size()];
    size_t s = 0;
    tlv.decode(result, &s);

    TEST_ASSERT_EQUAL(s, tlv.size());
    TEST_ASSERT_EQUAL_MEMORY(data, result, length);
    TEST_ASSERT_EQUAL(s, sizeof(data));

    tlv.clear();
}

void test_tlv_duo(void) {

    TLV8 tlv;
    const int length = 13;
    uint8_t data[length] = {0x01, 0x07, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x02, 0x02, 0x01, 0x02};
    tlv.encode(data, length);

    uint8_t result[tlv.size()];
    size_t s = 0;
    tlv.decode(result, &s);

    TEST_ASSERT_EQUAL_MEMORY(data, result, length);
    TEST_ASSERT_EQUAL(s, sizeof(data));
    TEST_ASSERT_EQUAL(s, length);
    TEST_ASSERT_EQUAL(s, tlv.size());

    tlv.clear();
}

void test_tlv_duo_get_single(void) {

    uint8_t expected[2] = {0xA1, 0xA2};

    TLV8 tlv;
    const int length = 13;
    uint8_t data[length] = {0x01, 0x07, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x02, 0x02, 0xA1, 0xA2};
    tlv.encode(data, length);

    uint8_t result[tlv.size(0x02)];
    size_t s = 0;

    tlv.decode(0x02, result, &s);

    TEST_ASSERT_EQUAL_MEMORY(expected, result, 2);
    TEST_ASSERT_EQUAL(s, 2);
    TEST_ASSERT_EQUAL(tlv.size(0x02), 2);
    TEST_ASSERT_EQUAL(tlv.size(), 13);
    TEST_ASSERT_EQUAL(tlv.hasType(0x02), true);

    tlv.clear();
}

void test_tlv_long(void) {

    uint8_t expected[58] = { 0x84, 0x07, 0xA0, 0x00, 0x00, 0x00, 0x04, 0x10, 0x10, 0xA5, 0x2F, 0x50, 0x0A, 0x4D, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x9F, 0x38, 0x06, 0x9F, 0x5C, 0x08, 0x9F, 0x40, 0x05, 0xBF, 0x0C, 0x17, 0x9F, 0x5E, 0x09, 0x54, 0x13, 0x33, 0x90, 0x00, 0x00, 0x15, 0x13, 0x01, 0x9F, 0x5D, 0x03, 0x01, 0x01, 0x00, 0x9F, 0x4D, 0x02, 0x0B, 0x0A };

    TLV8 tlv;

    const uint8_t length = 60;
    uint8_t data[length] = { 0x6F, 0x3A, 0x84, 0x07, 0xA0, 0x00, 0x00, 0x00, 0x04, 0x10, 0x10, 0xA5, 0x2F, 0x50, 0x0A, 0x4D, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x9F, 0x38, 0x06, 0x9F, 0x5C, 0x08, 0x9F, 0x40, 0x05, 0xBF, 0x0C, 0x17, 0x9F, 0x5E, 0x09, 0x54, 0x13, 0x33, 0x90, 0x00, 0x00, 0x15, 0x13, 0x01, 0x9F, 0x5D, 0x03, 0x01, 0x01, 0x00, 0x9F, 0x4D, 0x02, 0x0B, 0x0A };

    tlv.encode(data, length);

    uint8_t result[tlv.size(0x6F)];
    size_t s = 0;

    tlv.decode(0x6F, result, &s);

    TEST_ASSERT_EQUAL_MEMORY(expected, result, 58);
    TEST_ASSERT_EQUAL(s, 58);
    TEST_ASSERT_EQUAL(tlv.size(0x6F), 58);
    TEST_ASSERT_EQUAL(tlv.size(), length);
    TEST_ASSERT_EQUAL(tlv.hasType(0x6F), true);

    tlv.clear();
}


void test_tlv_long_sub(void) {

    uint8_t expected[14] = { 0x82, 0x02, 0x58, 0x00, 0x94, 0x08, 0x08, 0x01, 0x01, 0x00, 0x10, 0x01, 0x03, 0x01 };

    TLV8 tlv;

    const uint8_t length = 16;
    uint8_t data[length] = { 0x77, 0x0E, 0x82, 0x02, 0x58, 0x00, 0x94, 0x08, 0x08, 0x01, 0x01, 0x00, 0x10, 0x01, 0x03, 0x01 };

    tlv.encode(data, length);

    uint8_t result[tlv.size(0x77)];
    size_t s = 0;

    tlv.decode(0x77, result, &s);

    TEST_ASSERT_EQUAL_MEMORY(expected, result, 14);
    TEST_ASSERT_EQUAL(s, 14);
    TEST_ASSERT_EQUAL(tlv.size(0x77), 14);
    TEST_ASSERT_EQUAL(tlv.size(), length);
    TEST_ASSERT_EQUAL(tlv.hasType(0x77), true);

    tlv.clear();
}

void test_tlv_long_combined(void) {

    const uint16_t expectedLength = 384;
    uint8_t expected[expectedLength] = { 0x60, 0x72, 0xC6, 0xF4, 0x1C, 0xFB, 0x16, 0xB6, 0xCD, 0x22, 0x04, 0xC7, 0x61, 0xEA, 0x72, 0x6E, 0xB4, 0x26, 0x03, 0x18, 0xA2, 0x36, 0x11, 0x9D, 0xAE, 0xA4, 0x4C, 0xB0, 0x9A, 0x5F, 0x34, 0xE9, 0x1B, 0x32, 0x98, 0x97, 0x0C, 0x8C, 0x85, 0x75, 0x4D, 0x4B, 0xBF, 0x6B, 0xEB, 0x72, 0x77, 0x97, 0xE2, 0x25, 0x89, 0x85, 0x11, 0xBF, 0x86, 0x56, 0x69, 0x2E, 0xE5, 0x09, 0xBF, 0xDC, 0x84, 0xB6, 0x94, 0xD9, 0x46, 0x14, 0xB8, 0x06, 0xC5, 0x91, 0x02, 0xEA, 0x40, 0x32, 0x02, 0xD2, 0x97, 0x8F, 0xE1, 0xB4, 0x5A, 0x29, 0x79, 0x9C, 0xDE, 0xF7, 0x35, 0xE1, 0xAB, 0xA7, 0xC9, 0xC0, 0xAD, 0x36, 0x6C, 0x92, 0x6C, 0x61, 0xF0, 0x68, 0x3F, 0xAD, 0xF4, 0xFD, 0xFC, 0xA3, 0x1C, 0x4D, 0x7D, 0x14, 0x57, 0xF7, 0x4F, 0x83, 0x6F, 0x59, 0x83, 0x22, 0xA4, 0xF6, 0x74, 0xA6, 0x1B, 0x3C, 0x15, 0xA4, 0x04, 0xA8, 0x1C, 0x74, 0x34, 0x75, 0x56, 0xD5, 0x8E, 0x85, 0xC3, 0x51, 0x53, 0x27, 0xD7, 0xD2, 0x04, 0x2A, 0xCD, 0x96, 0x31, 0x21, 0x93, 0x36, 0xDE, 0x5C, 0xAC, 0x57, 0xE7, 0xB4, 0x92, 0x1C, 0xF2, 0xAB, 0xEB, 0x17, 0x98, 0x9B, 0x00, 0x62, 0x46, 0x2B, 0xF8, 0x46, 0xB5, 0x8D, 0x37, 0x53, 0x1F, 0xB9, 0x55, 0x10, 0x14, 0x8C, 0xB4, 0x53, 0x5F, 0x1D, 0x86, 0xFB, 0x53, 0x00, 0xAB, 0x89, 0xD3, 0x4D, 0x9B, 0xCA, 0xB5, 0x6A, 0x57, 0x83, 0xA6, 0x69, 0x1A, 0x4C, 0xE1, 0x29, 0xED, 0xE9, 0x72, 0xCC, 0x56, 0x0D, 0x7F, 0x01, 0x8D, 0x55, 0xBA, 0xA9, 0x65, 0x45, 0x4C, 0xBE, 0xD7, 0x6E, 0x7C, 0x57, 0x56, 0xB6, 0xE5, 0x4B, 0x83, 0xDE, 0xA3, 0xA7, 0x15, 0x4A, 0xEA, 0xC2, 0xE7, 0xF0, 0x22, 0xCA, 0x53, 0xDD, 0xEE, 0x26, 0x31, 0x61, 0xB2, 0x6C, 0x66, 0xF1, 0x12, 0x40, 0x4D, 0xC9, 0x30, 0xC9, 0x02, 0xCF, 0xB5, 0xDD, 0x65, 0x49, 0xA3, 0xC7, 0xD2, 0x6F, 0x86, 0xA3, 0xB8, 0xD3, 0xD4, 0x2E, 0xA6, 0x09, 0xFE, 0x92, 0xBC, 0x59, 0x60, 0x4E, 0x40, 0x00, 0x6F, 0xE6, 0xF2, 0x13, 0xAF, 0x69, 0x5E, 0x4E, 0xDE, 0xB7, 0x75, 0xE5, 0x9F, 0x50, 0x47, 0x6F, 0xE2, 0xFA, 0xA5, 0x40, 0xA8, 0x70, 0x4F, 0x1A, 0x83, 0xD0, 0x50, 0xF8, 0xAB, 0x8B, 0x26, 0x37, 0xA7, 0x70, 0x4E, 0x83, 0x16, 0x21, 0xFF, 0x71, 0xA9, 0xCD, 0x12, 0x71, 0x19, 0x5D, 0x7F, 0xED, 0xCA, 0xF4, 0x22, 0xD3, 0xDB, 0x63, 0xA9, 0x04, 0xB9, 0x9E, 0xE2, 0x1C, 0x3F, 0xDA, 0xEF, 0x4C, 0x22, 0x21, 0x25, 0xDF, 0x77, 0xE5, 0xDF, 0x07, 0xB9, 0x0D, 0x79, 0x73, 0xBC, 0x3E, 0x12, 0x24, 0xEF, 0x90, 0xA3, 0x3E, 0x8F, 0x81, 0x05, 0x63, 0x59, 0xEE, 0xED, 0xE4, 0xD8, 0xED, 0x30, 0x87, 0x38, 0xCF, 0x47, 0xCC };

    TLV8 tlv;

    const uint16_t length = 388;
    uint8_t data[length] = { 0x06, 0xFF, 0x60, 0x72, 0xC6, 0xF4, 0x1C, 0xFB, 0x16, 0xB6, 0xCD, 0x22, 0x04, 0xC7, 0x61, 0xEA, 0x72, 0x6E, 0xB4, 0x26, 0x03, 0x18, 0xA2, 0x36, 0x11, 0x9D, 0xAE, 0xA4, 0x4C, 0xB0, 0x9A, 0x5F, 0x34, 0xE9, 0x1B, 0x32, 0x98, 0x97, 0x0C, 0x8C, 0x85, 0x75, 0x4D, 0x4B, 0xBF, 0x6B, 0xEB, 0x72, 0x77, 0x97, 0xE2, 0x25, 0x89, 0x85, 0x11, 0xBF, 0x86, 0x56, 0x69, 0x2E, 0xE5, 0x09, 0xBF, 0xDC, 0x84, 0xB6, 0x94, 0xD9, 0x46, 0x14, 0xB8, 0x06, 0xC5, 0x91, 0x02, 0xEA, 0x40, 0x32, 0x02, 0xD2, 0x97, 0x8F, 0xE1, 0xB4, 0x5A, 0x29, 0x79, 0x9C, 0xDE, 0xF7, 0x35, 0xE1, 0xAB, 0xA7, 0xC9, 0xC0, 0xAD, 0x36, 0x6C, 0x92, 0x6C, 0x61, 0xF0, 0x68, 0x3F, 0xAD, 0xF4, 0xFD, 0xFC, 0xA3, 0x1C, 0x4D, 0x7D, 0x14, 0x57, 0xF7, 0x4F, 0x83, 0x6F, 0x59, 0x83, 0x22, 0xA4, 0xF6, 0x74, 0xA6, 0x1B, 0x3C, 0x15, 0xA4, 0x04, 0xA8, 0x1C, 0x74, 0x34, 0x75, 0x56, 0xD5, 0x8E, 0x85, 0xC3, 0x51, 0x53, 0x27, 0xD7, 0xD2, 0x04, 0x2A, 0xCD, 0x96, 0x31, 0x21, 0x93, 0x36, 0xDE, 0x5C, 0xAC, 0x57, 0xE7, 0xB4, 0x92, 0x1C, 0xF2, 0xAB, 0xEB, 0x17, 0x98, 0x9B, 0x00, 0x62, 0x46, 0x2B, 0xF8, 0x46, 0xB5, 0x8D, 0x37, 0x53, 0x1F, 0xB9, 0x55, 0x10, 0x14, 0x8C, 0xB4, 0x53, 0x5F, 0x1D, 0x86, 0xFB, 0x53, 0x00, 0xAB, 0x89, 0xD3, 0x4D, 0x9B, 0xCA, 0xB5, 0x6A, 0x57, 0x83, 0xA6, 0x69, 0x1A, 0x4C, 0xE1, 0x29, 0xED, 0xE9, 0x72, 0xCC, 0x56, 0x0D, 0x7F, 0x01, 0x8D, 0x55, 0xBA, 0xA9, 0x65, 0x45, 0x4C, 0xBE, 0xD7, 0x6E, 0x7C, 0x57, 0x56, 0xB6, 0xE5, 0x4B, 0x83, 0xDE, 0xA3, 0xA7, 0x15, 0x4A, 0xEA, 0xC2, 0xE7, 0xF0, 0x22, 0xCA, 0x53, 0xDD, 0xEE, 0x26, 0x31, 0x61, 0xB2, 0x6C, 0x66, 0xF1, 0x12, 0x40, 0x4D, 0x06, 0x81, 0xC9, 0x30, 0xC9, 0x02, 0xCF, 0xB5, 0xDD, 0x65, 0x49, 0xA3, 0xC7, 0xD2, 0x6F, 0x86, 0xA3, 0xB8, 0xD3, 0xD4, 0x2E, 0xA6, 0x09, 0xFE, 0x92, 0xBC, 0x59, 0x60, 0x4E, 0x40, 0x00, 0x6F, 0xE6, 0xF2, 0x13, 0xAF, 0x69, 0x5E, 0x4E, 0xDE, 0xB7, 0x75, 0xE5, 0x9F, 0x50, 0x47, 0x6F, 0xE2, 0xFA, 0xA5, 0x40, 0xA8, 0x70, 0x4F, 0x1A, 0x83, 0xD0, 0x50, 0xF8, 0xAB, 0x8B, 0x26, 0x37, 0xA7, 0x70, 0x4E, 0x83, 0x16, 0x21, 0xFF, 0x71, 0xA9, 0xCD, 0x12, 0x71, 0x19, 0x5D, 0x7F, 0xED, 0xCA, 0xF4, 0x22, 0xD3, 0xDB, 0x63, 0xA9, 0x04, 0xB9, 0x9E, 0xE2, 0x1C, 0x3F, 0xDA, 0xEF, 0x4C, 0x22, 0x21, 0x25, 0xDF, 0x77, 0xE5, 0xDF, 0x07, 0xB9, 0x0D, 0x79, 0x73, 0xBC, 0x3E, 0x12, 0x24, 0xEF, 0x90, 0xA3, 0x3E, 0x8F, 0x81, 0x05, 0x63, 0x59, 0xEE, 0xED, 0xE4, 0xD8, 0xED, 0x30, 0x87, 0x38, 0xCF, 0x47, 0xCC };

    tlv.encode(data, length);

    uint8_t relevantType = 0x06;
    uint8_t result[tlv.size(relevantType)];
    size_t s = 0;

    tlv.decode(relevantType, result, &s);

    TEST_ASSERT_EQUAL_MEMORY(expected, result, expectedLength);
    TEST_ASSERT_EQUAL(s, expectedLength);
    TEST_ASSERT_EQUAL(tlv.size(relevantType), expectedLength);
    TEST_ASSERT_EQUAL(tlv.size(), length);
    TEST_ASSERT_EQUAL(tlv.hasType(relevantType), true);

    tlv.clear();
}

void test_tlv_long_combined_two(void) {

    const uint16_t expectedLength = 384;
    uint8_t expected[expectedLength] = { 0x72, 0x20, 0x66, 0x20, 0x71, 0xBB, 0xCB, 0xA3, 0x8F, 0x06, 0xC7, 0xCD, 0x17, 0x82, 0x74, 0xC7, 0xEC, 0x3F, 0xCB, 0x58, 0x5E, 0x47, 0x9A, 0xF5, 0x1F, 0x18, 0xBE, 0x91, 0xCB, 0xDC, 0x13, 0xD2, 0x6B, 0x29, 0x75, 0x29, 0x1C, 0xB4, 0x9F, 0xEF, 0xF5, 0xA7, 0x78, 0x2F, 0x7D, 0xA5, 0x26, 0xDA, 0x30, 0x78, 0x33, 0xAB, 0x0E, 0x66, 0xA7, 0xCD, 0xDB, 0xB5, 0x9A, 0xDB, 0xD6, 0x1B, 0x1D, 0xBA, 0xA3, 0xAF, 0xFE, 0x8B, 0x12, 0x19, 0x84, 0x1D, 0xE6, 0x0B, 0xCD, 0x5D, 0x5C, 0xE5, 0xA5, 0xE1, 0x14, 0x92, 0x6A, 0x49, 0x28, 0xE2, 0xF9, 0x2F, 0x36, 0x5D, 0x42, 0xAB, 0x45, 0xCE, 0xFF, 0xAA, 0xDA, 0x43, 0xD7, 0x9E, 0x7C, 0x6C, 0x05, 0x7D, 0x25, 0xB2, 0xE7, 0x87, 0x59, 0xFE, 0xA9, 0x45, 0xEB, 0x40, 0x84, 0x98, 0x7C, 0x05, 0x0B, 0x12, 0xCA, 0xE2, 0x11, 0xF2, 0xAF, 0x99, 0x41, 0xA5, 0x68, 0x62, 0xEF, 0x70, 0xAB, 0x8F, 0x2D, 0x9A, 0x83, 0x48, 0xD1, 0x47, 0x46, 0x57, 0x5E, 0x41, 0xCC, 0xFF, 0xE9, 0x82, 0x20, 0x71, 0xFE, 0x82, 0xAE, 0xA9, 0x4E, 0x23, 0x8C, 0x81, 0x07, 0xF7, 0x81, 0x10, 0xAC, 0x56, 0x80, 0xEF, 0xF7, 0x72, 0xDC, 0xC2, 0x8B, 0x83, 0x39, 0xBE, 0xFC, 0x4E, 0x5F, 0x53, 0x1F, 0x3E, 0xCC, 0x30, 0x21, 0xE2, 0xD6, 0xFE, 0x21, 0x3E, 0x72, 0xF5, 0x8B, 0x74, 0x90, 0x50, 0x86, 0x77, 0x73, 0xBF, 0xB2, 0xD0, 0x7A, 0x27, 0x1D, 0x3A, 0x4F, 0x84, 0x48, 0xC2, 0xF7, 0x75, 0xEF, 0x16, 0x5E, 0x3B, 0x83, 0x7A, 0x7B, 0xD1, 0x17, 0xB9, 0xFD, 0x70, 0x57, 0xAB, 0xCB, 0x2D, 0x4E, 0xAF, 0x5A, 0x6B, 0x9B, 0xDC, 0x73, 0x45, 0x1A, 0xA5, 0x87, 0x5C, 0xE1, 0x84, 0x16, 0x96, 0x0D, 0x5D, 0xC7, 0x56, 0xD5, 0x40, 0xCD, 0x21, 0x42, 0xC1, 0x84, 0xF7, 0x94, 0x02, 0x02, 0x58, 0x98, 0xFD, 0x9E, 0x71, 0x72, 0x8C, 0xA5, 0x40, 0x68, 0x5C, 0x05, 0xE7, 0x72, 0xA6, 0xCD, 0xBD, 0x29, 0xE6, 0xBD, 0x52, 0x1A, 0x0F, 0x47, 0x7D, 0x1E, 0xDE, 0x5F, 0xE7, 0x9E, 0x28, 0xF7, 0xD7, 0xE6, 0x0E, 0x4F, 0x6D, 0xA4, 0x0D, 0xA4, 0xA4, 0x38, 0x33, 0xA8, 0x0F, 0x80, 0x18, 0xA8, 0x49, 0xD3, 0xE2, 0x39, 0xA2, 0x61, 0x74, 0xC4, 0xF7, 0x2D, 0xB5, 0x38, 0xE2, 0x06, 0x09, 0x10, 0x1B, 0x24, 0x7F, 0xF9, 0x2C, 0x6E, 0xF6, 0x00, 0xF9, 0x59, 0x7C, 0xC0, 0x70, 0xAB, 0xF7, 0xED, 0xC4, 0xA2, 0xC9, 0xDF, 0x55, 0x59, 0xC8, 0xCE, 0x57, 0xC7, 0xF8, 0x6C, 0x83, 0x31, 0xEF, 0xA8, 0xD7, 0x10, 0x3C, 0x86, 0x37, 0xD5, 0x70, 0x5E, 0x28, 0x14, 0x6E, 0x7A, 0xBD, 0x4A, 0xC8, 0xB5, 0x77, 0x30, 0xCE, 0xBB, 0x36, 0x58, 0xC3, 0x75, 0x2C, 0xBB, 0x51, 0x73, 0x95, 0xC7, 0x09 };

    TLV8 tlv;

    const uint16_t length = 388;
    uint8_t data[length] = { 0x06, 0xFF, 0x72, 0x20, 0x66, 0x20, 0x71, 0xBB, 0xCB, 0xA3, 0x8F, 0x06, 0xC7, 0xCD, 0x17, 0x82, 0x74, 0xC7, 0xEC, 0x3F, 0xCB, 0x58, 0x5E, 0x47, 0x9A, 0xF5, 0x1F, 0x18, 0xBE, 0x91, 0xCB, 0xDC, 0x13, 0xD2, 0x6B, 0x29, 0x75, 0x29, 0x1C, 0xB4, 0x9F, 0xEF, 0xF5, 0xA7, 0x78, 0x2F, 0x7D, 0xA5, 0x26, 0xDA, 0x30, 0x78, 0x33, 0xAB, 0x0E, 0x66, 0xA7, 0xCD, 0xDB, 0xB5, 0x9A, 0xDB, 0xD6, 0x1B, 0x1D, 0xBA, 0xA3, 0xAF, 0xFE, 0x8B, 0x12, 0x19, 0x84, 0x1D, 0xE6, 0x0B, 0xCD, 0x5D, 0x5C, 0xE5, 0xA5, 0xE1, 0x14, 0x92, 0x6A, 0x49, 0x28, 0xE2, 0xF9, 0x2F, 0x36, 0x5D, 0x42, 0xAB, 0x45, 0xCE, 0xFF, 0xAA, 0xDA, 0x43, 0xD7, 0x9E, 0x7C, 0x6C, 0x05, 0x7D, 0x25, 0xB2, 0xE7, 0x87, 0x59, 0xFE, 0xA9, 0x45, 0xEB, 0x40, 0x84, 0x98, 0x7C, 0x05, 0x0B, 0x12, 0xCA, 0xE2, 0x11, 0xF2, 0xAF, 0x99, 0x41, 0xA5, 0x68, 0x62, 0xEF, 0x70, 0xAB, 0x8F, 0x2D, 0x9A, 0x83, 0x48, 0xD1, 0x47, 0x46, 0x57, 0x5E, 0x41, 0xCC, 0xFF, 0xE9, 0x82, 0x20, 0x71, 0xFE, 0x82, 0xAE, 0xA9, 0x4E, 0x23, 0x8C, 0x81, 0x07, 0xF7, 0x81, 0x10, 0xAC, 0x56, 0x80, 0xEF, 0xF7, 0x72, 0xDC, 0xC2, 0x8B, 0x83, 0x39, 0xBE, 0xFC, 0x4E, 0x5F, 0x53, 0x1F, 0x3E, 0xCC, 0x30, 0x21, 0xE2, 0xD6, 0xFE, 0x21, 0x3E, 0x72, 0xF5, 0x8B, 0x74, 0x90, 0x50, 0x86, 0x77, 0x73, 0xBF, 0xB2, 0xD0, 0x7A, 0x27, 0x1D, 0x3A, 0x4F, 0x84, 0x48, 0xC2, 0xF7, 0x75, 0xEF, 0x16, 0x5E, 0x3B, 0x83, 0x7A, 0x7B, 0xD1, 0x17, 0xB9, 0xFD, 0x70, 0x57, 0xAB, 0xCB, 0x2D, 0x4E, 0xAF, 0x5A, 0x6B, 0x9B, 0xDC, 0x73, 0x45, 0x1A, 0xA5, 0x87, 0x5C, 0xE1, 0x84, 0x16, 0x96, 0x0D, 0x5D, 0xC7, 0x56, 0xD5, 0x40, 0xCD, 0x21, 0x42, 0xC1, 0x84, 0xF7, 0x94, 0x06, 0x81, 0x02, 0x02, 0x58, 0x98, 0xFD, 0x9E, 0x71, 0x72, 0x8C, 0xA5, 0x40, 0x68, 0x5C, 0x05, 0xE7, 0x72, 0xA6, 0xCD, 0xBD, 0x29, 0xE6, 0xBD, 0x52, 0x1A, 0x0F, 0x47, 0x7D, 0x1E, 0xDE, 0x5F, 0xE7, 0x9E, 0x28, 0xF7, 0xD7, 0xE6, 0x0E, 0x4F, 0x6D, 0xA4, 0x0D, 0xA4, 0xA4, 0x38, 0x33, 0xA8, 0x0F, 0x80, 0x18, 0xA8, 0x49, 0xD3, 0xE2, 0x39, 0xA2, 0x61, 0x74, 0xC4, 0xF7, 0x2D, 0xB5, 0x38, 0xE2, 0x06, 0x09, 0x10, 0x1B, 0x24, 0x7F, 0xF9, 0x2C, 0x6E, 0xF6, 0x00, 0xF9, 0x59, 0x7C, 0xC0, 0x70, 0xAB, 0xF7, 0xED, 0xC4, 0xA2, 0xC9, 0xDF, 0x55, 0x59, 0xC8, 0xCE, 0x57, 0xC7, 0xF8, 0x6C, 0x83, 0x31, 0xEF, 0xA8, 0xD7, 0x10, 0x3C, 0x86, 0x37, 0xD5, 0x70, 0x5E, 0x28, 0x14, 0x6E, 0x7A, 0xBD, 0x4A, 0xC8, 0xB5, 0x77, 0x30, 0xCE, 0xBB, 0x36, 0x58, 0xC3, 0x75, 0x2C, 0xBB, 0x51, 0x73, 0x95, 0xC7, 0x09 };

    tlv.encode(data, length);

    uint8_t relevantType = 0x06;
    uint8_t result[tlv.size(relevantType)];
    size_t s = 0;

    tlv.decode(relevantType, result, &s);

    TEST_ASSERT_EQUAL_MEMORY(expected, result, expectedLength);
    TEST_ASSERT_EQUAL(s, expectedLength);
    TEST_ASSERT_EQUAL(tlv.size(relevantType), expectedLength);
    TEST_ASSERT_EQUAL(tlv.size(), length);
    TEST_ASSERT_EQUAL(tlv.hasType(relevantType), true);

    tlv.clear();
}

void test_tlv_long_combined_three(void) {

    const uint16_t expectedLength = 384;
    uint8_t expected[expectedLength] = { 0x60, 0x72, 0xC6, 0xF4, 0x1C, 0xFB, 0x16, 0xB6, 0xCD, 0x22, 0x04, 0xC7, 0x61, 0xEA, 0x72, 0x6E, 0xB4, 0x26, 0x03, 0x18, 0xA2, 0x36, 0x11, 0x9D, 0xAE, 0xA4, 0x4C, 0xB0, 0x9A, 0x5F, 0x34, 0xE9, 0x1B, 0x32, 0x98, 0x97, 0x0C, 0x8C, 0x85, 0x75, 0x4D, 0x4B, 0xBF, 0x6B, 0xEB, 0x72, 0x77, 0x97, 0xE2, 0x25, 0x89, 0x85, 0x11, 0xBF, 0x86, 0x56, 0x69, 0x2E, 0xE5, 0x09, 0xBF, 0xDC, 0x84, 0xB6, 0x94, 0xD9, 0x46, 0x14, 0xB8, 0x06, 0xC5, 0x91, 0x02, 0xEA, 0x40, 0x32, 0x02, 0xD2, 0x97, 0x8F, 0xE1, 0xB4, 0x5A, 0x29, 0x79, 0x9C, 0xDE, 0xF7, 0x35, 0xE1, 0xAB, 0xA7, 0xC9, 0xC0, 0xAD, 0x36, 0x6C, 0x92, 0x6C, 0x61, 0xF0, 0x68, 0x3F, 0xAD, 0xF4, 0xFD, 0xFC, 0xA3, 0x1C, 0x4D, 0x7D, 0x14, 0x57, 0xF7, 0x4F, 0x83, 0x6F, 0x59, 0x83, 0x22, 0xA4, 0xF6, 0x74, 0xA6, 0x1B, 0x3C, 0x15, 0xA4, 0x04, 0xA8, 0x1C, 0x74, 0x34, 0x75, 0x56, 0xD5, 0x8E, 0x85, 0xC3, 0x51, 0x53, 0x27, 0xD7, 0xD2, 0x04, 0x2A, 0xCD, 0x96, 0x31, 0x21, 0x93, 0x36, 0xDE, 0x5C, 0xAC, 0x57, 0xE7, 0xB4, 0x92, 0x1C, 0xF2, 0xAB, 0xEB, 0x17, 0x98, 0x9B, 0x00, 0x62, 0x46, 0x2B, 0xF8, 0x46, 0xB5, 0x8D, 0x37, 0x53, 0x1F, 0xB9, 0x55, 0x10, 0x14, 0x8C, 0xB4, 0x53, 0x5F, 0x1D, 0x86, 0xFB, 0x53, 0x00, 0xAB, 0x89, 0xD3, 0x4D, 0x9B, 0xCA, 0xB5, 0x6A, 0x57, 0x83, 0xA6, 0x69, 0x1A, 0x4C, 0xE1, 0x29, 0xED, 0xE9, 0x72, 0xCC, 0x56, 0x0D, 0x7F, 0x01, 0x8D, 0x55, 0xBA, 0xA9, 0x65, 0x45, 0x4C, 0xBE, 0xD7, 0x6E, 0x7C, 0x57, 0x56, 0xB6, 0xE5, 0x4B, 0x83, 0xDE, 0xA3, 0xA7, 0x15, 0x4A, 0xEA, 0xC2, 0xE7, 0xF0, 0x22, 0xCA, 0x53, 0xDD, 0xEE, 0x26, 0x31, 0x61, 0xB2, 0x6C, 0x66, 0xF1, 0x12, 0x40, 0x4D, 0xC9, 0x30, 0xC9, 0x02, 0xCF, 0xB5, 0xDD, 0x65, 0x49, 0xA3, 0xC7, 0xD2, 0x6F, 0x86, 0xA3, 0xB8, 0xD3, 0xD4, 0x2E, 0xA6, 0x09, 0xFE, 0x92, 0xBC, 0x59, 0x60, 0x4E, 0x40, 0x00, 0x6F, 0xE6, 0xF2, 0x13, 0xAF, 0x69, 0x5E, 0x4E, 0xDE, 0xB7, 0x75, 0xE5, 0x9F, 0x50, 0x47, 0x6F, 0xE2, 0xFA, 0xA5, 0x40, 0xA8, 0x70, 0x4F, 0x1A, 0x83, 0xD0, 0x50, 0xF8, 0xAB, 0x8B, 0x26, 0x37, 0xA7, 0x70, 0x4E, 0x83, 0x16, 0x21, 0xFF, 0x71, 0xA9, 0xCD, 0x12, 0x71, 0x19, 0x5D, 0x7F, 0xED, 0xCA, 0xF4, 0x22, 0xD3, 0xDB, 0x63, 0xA9, 0x04, 0xB9, 0x9E, 0xE2, 0x1C, 0x3F, 0xDA, 0xEF, 0x4C, 0x22, 0x21, 0x25, 0xDF, 0x77, 0xE5, 0xDF, 0x07, 0xB9, 0x0D, 0x79, 0x73, 0xBC, 0x3E, 0x12, 0x24, 0xEF, 0x90, 0xA3, 0x3E, 0x8F, 0x81, 0x05, 0x63, 0x59, 0xEE, 0xED, 0xE4, 0xD8, 0xED, 0x30, 0x87, 0x38, 0xCF, 0x47, 0xCC };

    const uint8_t expectedLength2 = 64;
    uint8_t expected2[expectedLength2] = { 0x6A, 0xFF, 0x7F, 0xBA, 0x6A, 0x30, 0xA6, 0x7A, 0x46, 0xE4, 0x7F, 0xBA, 0x56, 0xB9, 0xAB, 0xAE, 0x46, 0xB4, 0x72, 0x63, 0x1B, 0x88, 0xB8, 0x6F, 0x45, 0x30, 0xD8, 0xB0, 0xCC, 0x4B, 0x25, 0x5B, 0x07, 0xA0, 0x99, 0x6D, 0x03, 0xF1, 0xD9, 0xE4, 0xC7, 0x58, 0x77, 0x89, 0x9F, 0x63, 0x39, 0xE3, 0x1F, 0x58, 0x71, 0x78, 0x42, 0xCC, 0x47, 0x3C, 0x09, 0xEF, 0x83, 0x4B, 0xF6, 0x9E, 0x76, 0x86 };

    TLV8 tlv;

    const uint16_t length = 454;
    uint8_t data[length] = { 0x06, 0xFF, 0x60, 0x72, 0xC6, 0xF4, 0x1C, 0xFB, 0x16, 0xB6, 0xCD, 0x22, 0x04, 0xC7, 0x61, 0xEA, 0x72, 0x6E, 0xB4, 0x26, 0x03, 0x18, 0xA2, 0x36, 0x11, 0x9D, 0xAE, 0xA4, 0x4C, 0xB0, 0x9A, 0x5F, 0x34, 0xE9, 0x1B, 0x32, 0x98, 0x97, 0x0C, 0x8C, 0x85, 0x75, 0x4D, 0x4B, 0xBF, 0x6B, 0xEB, 0x72, 0x77, 0x97, 0xE2, 0x25, 0x89, 0x85, 0x11, 0xBF, 0x86, 0x56, 0x69, 0x2E, 0xE5, 0x09, 0xBF, 0xDC, 0x84, 0xB6, 0x94, 0xD9, 0x46, 0x14, 0xB8, 0x06, 0xC5, 0x91, 0x02, 0xEA, 0x40, 0x32, 0x02, 0xD2, 0x97, 0x8F, 0xE1, 0xB4, 0x5A, 0x29, 0x79, 0x9C, 0xDE, 0xF7, 0x35, 0xE1, 0xAB, 0xA7, 0xC9, 0xC0, 0xAD, 0x36, 0x6C, 0x92, 0x6C, 0x61, 0xF0, 0x68, 0x3F, 0xAD, 0xF4, 0xFD, 0xFC, 0xA3, 0x1C, 0x4D, 0x7D, 0x14, 0x57, 0xF7, 0x4F, 0x83, 0x6F, 0x59, 0x83, 0x22, 0xA4, 0xF6, 0x74, 0xA6, 0x1B, 0x3C, 0x15, 0xA4, 0x04, 0xA8, 0x1C, 0x74, 0x34, 0x75, 0x56, 0xD5, 0x8E, 0x85, 0xC3, 0x51, 0x53, 0x27, 0xD7, 0xD2, 0x04, 0x2A, 0xCD, 0x96, 0x31, 0x21, 0x93, 0x36, 0xDE, 0x5C, 0xAC, 0x57, 0xE7, 0xB4, 0x92, 0x1C, 0xF2, 0xAB, 0xEB, 0x17, 0x98, 0x9B, 0x00, 0x62, 0x46, 0x2B, 0xF8, 0x46, 0xB5, 0x8D, 0x37, 0x53, 0x1F, 0xB9, 0x55, 0x10, 0x14, 0x8C, 0xB4, 0x53, 0x5F, 0x1D, 0x86, 0xFB, 0x53, 0x00, 0xAB, 0x89, 0xD3, 0x4D, 0x9B, 0xCA, 0xB5, 0x6A, 0x57, 0x83, 0xA6, 0x69, 0x1A, 0x4C, 0xE1, 0x29, 0xED, 0xE9, 0x72, 0xCC, 0x56, 0x0D, 0x7F, 0x01, 0x8D, 0x55, 0xBA, 0xA9, 0x65, 0x45, 0x4C, 0xBE, 0xD7, 0x6E, 0x7C, 0x57, 0x56, 0xB6, 0xE5, 0x4B, 0x83, 0xDE, 0xA3, 0xA7, 0x15, 0x4A, 0xEA, 0xC2, 0xE7, 0xF0, 0x22, 0xCA, 0x53, 0xDD, 0xEE, 0x26, 0x31, 0x61, 0xB2, 0x6C, 0x66, 0xF1, 0x12, 0x40, 0x4D, 0x06, 0x81, 0xC9, 0x30, 0xC9, 0x02, 0xCF, 0xB5, 0xDD, 0x65, 0x49, 0xA3, 0xC7, 0xD2, 0x6F, 0x86, 0xA3, 0xB8, 0xD3, 0xD4, 0x2E, 0xA6, 0x09, 0xFE, 0x92, 0xBC, 0x59, 0x60, 0x4E, 0x40, 0x00, 0x6F, 0xE6, 0xF2, 0x13, 0xAF, 0x69, 0x5E, 0x4E, 0xDE, 0xB7, 0x75, 0xE5, 0x9F, 0x50, 0x47, 0x6F, 0xE2, 0xFA, 0xA5, 0x40, 0xA8, 0x70, 0x4F, 0x1A, 0x83, 0xD0, 0x50, 0xF8, 0xAB, 0x8B, 0x26, 0x37, 0xA7, 0x70, 0x4E, 0x83, 0x16, 0x21, 0xFF, 0x71, 0xA9, 0xCD, 0x12, 0x71, 0x19, 0x5D, 0x7F, 0xED, 0xCA, 0xF4, 0x22, 0xD3, 0xDB, 0x63, 0xA9, 0x04, 0xB9, 0x9E, 0xE2, 0x1C, 0x3F, 0xDA, 0xEF, 0x4C, 0x22, 0x21, 0x25, 0xDF, 0x77, 0xE5, 0xDF, 0x07, 0xB9, 0x0D, 0x79, 0x73, 0xBC, 0x3E, 0x12, 0x24, 0xEF, 0x90, 0xA3, 0x3E, 0x8F, 0x81, 0x05, 0x63, 0x59, 0xEE, 0xED, 0xE4, 0xD8, 0xED, 0x30, 0x87, 0x38, 0xCF, 0x47, 0xCC, 0x04, 0x40, 0x6A, 0xFF, 0x7F, 0xBA, 0x6A, 0x30, 0xA6, 0x7A, 0x46, 0xE4, 0x7F, 0xBA, 0x56, 0xB9, 0xAB, 0xAE, 0x46, 0xB4, 0x72, 0x63, 0x1B, 0x88, 0xB8, 0x6F, 0x45, 0x30, 0xD8, 0xB0, 0xCC, 0x4B, 0x25, 0x5B, 0x07, 0xA0, 0x99, 0x6D, 0x03, 0xF1, 0xD9, 0xE4, 0xC7, 0x58, 0x77, 0x89, 0x9F, 0x63, 0x39, 0xE3, 0x1F, 0x58, 0x71, 0x78, 0x42, 0xCC, 0x47, 0x3C, 0x09, 0xEF, 0x83, 0x4B, 0xF6, 0x9E, 0x76, 0x86 };

    tlv.encode(data, length);

    uint8_t relevantType = 0x06;
    uint8_t result[tlv.size(relevantType)];
    size_t s = 0;

    tlv.decode(relevantType, result, &s);

    TEST_ASSERT_EQUAL(tlv.size(), length);


    TEST_ASSERT_EQUAL_MEMORY(expected, result, expectedLength);
    TEST_ASSERT_EQUAL(s, expectedLength);
    TEST_ASSERT_EQUAL(tlv.size(relevantType), expectedLength);
    TEST_ASSERT_EQUAL(tlv.hasType(relevantType), true);

    uint8_t relevantType2 = 0x04;
    uint8_t result2[tlv.size(relevantType2)];
    size_t s2 = 0;

    tlv.decode(relevantType2, result2, &s2);

    TEST_ASSERT_EQUAL_MEMORY(expected2, result2, expectedLength2);
    TEST_ASSERT_EQUAL(s2, expectedLength2);
    TEST_ASSERT_EQUAL(tlv.size(relevantType2), expectedLength2);
    TEST_ASSERT_EQUAL(tlv.hasType(relevantType2), true);


    tlv.clear();
}

void test_tlv_separator(void) {

    TLV8 tlv;
    const int length = 6;
    uint8_t data[length] = {0xFF, 0x00, 0x01, 0x02, 0x03, 0x04};
    tlv.encode(data, length);

    uint8_t result[128];
    size_t s = 0;
    tlv.decode(result, &s);

    TEST_ASSERT_EQUAL(s, tlv.size());
    TEST_ASSERT_EQUAL_MEMORY(data, result, length);
    TEST_ASSERT_EQUAL(s, sizeof(data));
    TEST_ASSERT_EQUAL(s, length);
    TEST_ASSERT_EQUAL(tlv.hasType(0x01), true);
    TEST_ASSERT_EQUAL(tlv.size(0x01), 2);

    uint8_t expected[2] = {0x03, 0x04};
    uint8_t result2[tlv.size(0x01)];
    size_t s2 = 0;

    tlv.decode(0x01, result2, &s2);
    TEST_ASSERT_EQUAL(s2, tlv.size(0x01));
    TEST_ASSERT_EQUAL_MEMORY(expected, result2, tlv.size(0x01));

    tlv.clear();
}

int runAllTests(){
    UNITY_BEGIN();

    RUN_TEST(test_tlv8_simple_encode);
    RUN_TEST(test_tlv_duo);
    RUN_TEST(test_tlv_duo_get_single);
    RUN_TEST(test_tlv_separator);
    RUN_TEST(test_tlv_long);
    RUN_TEST(test_tlv_long_sub);

    RUN_TEST(test_tlv_long_combined);
    RUN_TEST(test_tlv_long_combined_two);
    RUN_TEST(test_tlv_long_combined_three);

    return UNITY_END();
}

#ifdef ARDUINO
void setup() {
    // NOTE!!! Wait for >2 secs
    // if board doesn't support software reset via Serial.DTR/RTS
    delay(2000);

    runAllTests();
}

void loop() {
    digitalWrite(13, HIGH);
    delay(100);
    digitalWrite(13, LOW);
    delay(500);
}

#else

int main(int argc, char **argv)
{
    return runAllTests();
}

#endif

